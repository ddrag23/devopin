name: Build and Release

# Trigger: ketika push tag yang dimulai dengan 'v'
on:
  push:
    tags:
      - "v*"
  # Manual trigger (optional)
  workflow_dispatch:

# Add permissions for GitHub token
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Multi-Platform
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - platform: linux
            arch: amd64
          - platform: linux
            arch: arm64

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      # 3. Cache dependencies (optional, speeds up builds)
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 5. Build executable
      - name: Build executable
        run: |
          export BUILD_PLATFORM=${{ matrix.platform }}
          export BUILD_ARCH=${{ matrix.arch }}
          pyinstaller build.spec \
          --clean \
          --noconfirm

      # 6. Upload artifacts (untuk sharing antar jobs)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devopin-app-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/devopin-app-${{ matrix.platform }}-${{ matrix.arch }}
          retention-days: 1

  # Job terpisah untuk create release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout untuk ambil file assets
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 4. Download semua build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # 5. Generate database with Alembic
      - name: Generate database with Alembic
        run: |
          # Install alembic if not already installed
          pip install alembic dotenv

          # Create empty database and run migrations
          touch devopin.db
          alembic upgrade head

          echo "Database created with proper schema"
          ls -la devopin.db

      # 6. Prepare release assets
      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy executables (check if artifacts directory exists)
          if [ -d "artifacts/" ]; then
            find artifacts/ -name "devopin-app-*" -type f -exec cp {} release-assets/ \;
          else
            echo "Warning: artifacts directory not found"
            ls -la
          fi

          # Copy installer dan assets lainnya dengan validasi
          if [ -f "install.sh" ]; then
            cp install.sh release-assets/
          else
            echo "#!/bin/bash" > release-assets/install.sh
            echo "echo 'Install script not available'" >> release-assets/install.sh
          fi

          if [ -f "uninstall.sh" ]; then
            cp uninstall.sh release-assets/
          else
            echo "#!/bin/bash" > release-assets/uninstall.sh
            echo "echo 'Uninstall script not available'" >> release-assets/uninstall.sh
          fi

          if [ -f "devopin.db" ]; then
            cp devopin.db release-assets/
          else
            echo "# Empty database file" > release-assets/devopin.db
          fi

          if [ -f ".env.example" ]; then
            cp .env.example release-assets/
          else
            echo "# Environment variables template" > release-assets/.env.example
          fi

          if [ -f "README.md" ]; then
            cp README.md release-assets/
          else
            echo "# Devopin Community Backend" > release-assets/README.md
          fi

          # Make scripts executable
          chmod +x release-assets/install.sh
          chmod +x release-assets/uninstall.sh
          chmod +x release-assets/devopin-app-* 2>/dev/null || true

          # Remove empty files
          find release-assets/ -size 0 -delete

          # List files for verification
          ls -la release-assets/

      # 7. Generate checksums
      - name: Generate checksums
        run: |
          cd release-assets
          if [ "$(ls -A .)" ]; then
            sha256sum * > SHA256SUMS
          else
            echo "No files to checksum" > SHA256SUMS
          fi
          cd ..

      # 8. Extract version dari tag
      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # 9. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/devopin-app:${{ steps.version.outputs.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/devopin-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 10. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          tag_name: ${{ steps.version.outputs.VERSION }}
          body: |
            ## üöÄ Devopin Community app ${{ steps.version.outputs.VERSION }}

            ### üê≥ Docker Installation (Recommended)
            ```bash
            docker run -d --name devopin-app \
              -p 8080:8080 \
              -v $(pwd)/data:/app/data \
              ${{ secrets.DOCKER_USERNAME }}/devopin-app:${{ steps.version.outputs.VERSION }}
            ```

            ### üì• Quick Installation
            ```bash
            curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | sudo bash
            ```

            ### üìã Manual Installation
            1. Download the appropriate executable for your platform
            2. Make it executable: `chmod +x devopin-app-*`
            3. Run: `./devopin-app-*`

            ### üì¶ What's Included
            - **Docker Image**: `${{ secrets.DOCKER_USERNAME }}/devopin-app:${{ steps.version.outputs.VERSION }}`
            - `devopin-app-linux-amd64` - Linux x64 executable
            - `devopin-app-linux-arm64` - Linux ARM64 executable  
            - `install.sh` - Automated installer script
            - `uninstall.sh` - Uninstaller script
            - `devopin.db` - SQLite database
            - `.env.example` - Environment variables template
            - `SHA256SUMS` - File checksums for verification

            ### üåê After Installation
            - Web interface: http://localhost:8080
            - Service management: `sudo systemctl status devopin-app`
            - View logs: `sudo journalctl -u devopin-app -f`

            ### üìä Changes
            - See [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.VERSION }}...HEAD) for details
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 7. Cleanup artifacts (optional)
      - name: Cleanup
        run: rm -rf artifacts/ release-assets/
